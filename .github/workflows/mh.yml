#checkov:skip=CKV2_GHA_1:ACL is required
name: "Terraform Pipeline"

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

permissions: read-all

jobs:
  checkov_scan:
    name: "Checkov Scan"
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      # Step 3: Run Checkov to scan the Terraform plan
      - name: Run Checkov to scan the Terraform plan
        run: |
          docker pull bridgecrew/checkov:latest
          docker run -v $(pwd):/tf -e TF_REGISTRY_TOKEN=${{ secrets.TF_API_TOKEN }} -t bridgecrew/checkov --download-external-modules true -d /tf --skip-check INFO

  tflint_check:
    name: "TFLint Check"
    runs-on: ubuntu-latest 

    # Define the steps to be executed within the job
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Run TFLint in a Docker container
      - name: Run TFLint in Docker container
        run: |
          # Pull the TFLint Docker image from the specified repository
          docker pull ghcr.io/terraform-linters/tflint-bundle

          # Run TFLint within a Docker container, mapping the current working directory to /data
          docker run --rm -v $PWD:/data ghcr.io/terraform-linters/tflint-bundle

  format:
    name: "Format Check"
    runs-on: ubuntu-latest
    steps:
    # Checkout code for the Github Actions runner
      - name: Checkout
        uses: actions/checkout@v3.5.3
    
    # Install Terraform   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Run terraform formatting checks  
      - name: Terraform FMT Check
        run: |
          terraform fmt -check -recursive

  validate:
    name: "Validate"
    runs-on: ubuntu-latest
    steps:

    # Checkout code for the Github Actions runner
      - name: Checkout
        uses: actions/checkout@v3.5.3

      - name: Clone repo
        uses: actions/checkout@v2

    # Install Terraform            
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: "Run - Terraform Init"
        id: init
        run: terraform init -input=false

    # Validates Terraform code 
      - name: Terraform Validate
        id: validate
        run: terraform validate

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [validate, format, tflint_check, checkov_scan, tfsec]
    steps:

    # Checkout code for the Github Actions runner
      - name: Checkout
        uses: actions/checkout@v3.5.3
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: "Run - Terraform Init"
        id: init
        run: terraform init -input=false

    # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false

  # Needs to define production environment on Github with approvals rules
  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 'Production'
    needs: [terraform-plan]
    steps:

    # Checkout code for the Github Actions runner
      - name: Checkout
        uses: actions/checkout@v3.5.3
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: "Run - Terraform Init"
        id: init
        run: terraform init -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false